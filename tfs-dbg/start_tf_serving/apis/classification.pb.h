// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow_serving/apis/classification.proto

#ifndef PROTOBUF_INCLUDED_tensorflow_5fserving_2fapis_2fclassification_2eproto
#define PROTOBUF_INCLUDED_tensorflow_5fserving_2fapis_2fclassification_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "tensorflow_serving/apis/input.pb.h"
#include "tensorflow_serving/apis/model.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_tensorflow_5fserving_2fapis_2fclassification_2eproto 

namespace protobuf_tensorflow_5fserving_2fapis_2fclassification_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_tensorflow_5fserving_2fapis_2fclassification_2eproto
namespace tensorflow {
namespace serving {
class Class;
class ClassDefaultTypeInternal;
extern ClassDefaultTypeInternal _Class_default_instance_;
class ClassificationRequest;
class ClassificationRequestDefaultTypeInternal;
extern ClassificationRequestDefaultTypeInternal _ClassificationRequest_default_instance_;
class ClassificationResponse;
class ClassificationResponseDefaultTypeInternal;
extern ClassificationResponseDefaultTypeInternal _ClassificationResponse_default_instance_;
class ClassificationResult;
class ClassificationResultDefaultTypeInternal;
extern ClassificationResultDefaultTypeInternal _ClassificationResult_default_instance_;
class Classifications;
class ClassificationsDefaultTypeInternal;
extern ClassificationsDefaultTypeInternal _Classifications_default_instance_;
}  // namespace serving
}  // namespace tensorflow
namespace google {
namespace protobuf {
template<> ::tensorflow::serving::Class* Arena::CreateMaybeMessage<::tensorflow::serving::Class>(Arena*);
template<> ::tensorflow::serving::ClassificationRequest* Arena::CreateMaybeMessage<::tensorflow::serving::ClassificationRequest>(Arena*);
template<> ::tensorflow::serving::ClassificationResponse* Arena::CreateMaybeMessage<::tensorflow::serving::ClassificationResponse>(Arena*);
template<> ::tensorflow::serving::ClassificationResult* Arena::CreateMaybeMessage<::tensorflow::serving::ClassificationResult>(Arena*);
template<> ::tensorflow::serving::Classifications* Arena::CreateMaybeMessage<::tensorflow::serving::Classifications>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace tensorflow {
namespace serving {

// ===================================================================

class Class : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.serving.Class) */ {
 public:
  Class();
  virtual ~Class();

  Class(const Class& from);

  inline Class& operator=(const Class& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Class(Class&& from) noexcept
    : Class() {
    *this = ::std::move(from);
  }

  inline Class& operator=(Class&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Class& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Class* internal_default_instance() {
    return reinterpret_cast<const Class*>(
               &_Class_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void UnsafeArenaSwap(Class* other);
  void Swap(Class* other);
  friend void swap(Class& a, Class& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Class* New() const final {
    return CreateMaybeMessage<Class>(NULL);
  }

  Class* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Class>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Class& from);
  void MergeFrom(const Class& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Class* other);
  protected:
  explicit Class(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string label = 1;
  void clear_label();
  static const int kLabelFieldNumber = 1;
  const ::std::string& label() const;
  void set_label(const ::std::string& value);
  #if LANG_CXX11
  void set_label(::std::string&& value);
  #endif
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  ::std::string* mutable_label();
  ::std::string* release_label();
  void set_allocated_label(::std::string* label);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_label();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_label(
      ::std::string* label);

  // float score = 2;
  void clear_score();
  static const int kScoreFieldNumber = 2;
  float score() const;
  void set_score(float value);

  // @@protoc_insertion_point(class_scope:tensorflow.serving.Class)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr label_;
  float score_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_tensorflow_5fserving_2fapis_2fclassification_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Classifications : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.serving.Classifications) */ {
 public:
  Classifications();
  virtual ~Classifications();

  Classifications(const Classifications& from);

  inline Classifications& operator=(const Classifications& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Classifications(Classifications&& from) noexcept
    : Classifications() {
    *this = ::std::move(from);
  }

  inline Classifications& operator=(Classifications&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Classifications& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Classifications* internal_default_instance() {
    return reinterpret_cast<const Classifications*>(
               &_Classifications_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void UnsafeArenaSwap(Classifications* other);
  void Swap(Classifications* other);
  friend void swap(Classifications& a, Classifications& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Classifications* New() const final {
    return CreateMaybeMessage<Classifications>(NULL);
  }

  Classifications* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Classifications>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Classifications& from);
  void MergeFrom(const Classifications& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Classifications* other);
  protected:
  explicit Classifications(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tensorflow.serving.Class classes = 1;
  int classes_size() const;
  void clear_classes();
  static const int kClassesFieldNumber = 1;
  ::tensorflow::serving::Class* mutable_classes(int index);
  ::google::protobuf::RepeatedPtrField< ::tensorflow::serving::Class >*
      mutable_classes();
  const ::tensorflow::serving::Class& classes(int index) const;
  ::tensorflow::serving::Class* add_classes();
  const ::google::protobuf::RepeatedPtrField< ::tensorflow::serving::Class >&
      classes() const;

  // @@protoc_insertion_point(class_scope:tensorflow.serving.Classifications)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::serving::Class > classes_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_tensorflow_5fserving_2fapis_2fclassification_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ClassificationResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.serving.ClassificationResult) */ {
 public:
  ClassificationResult();
  virtual ~ClassificationResult();

  ClassificationResult(const ClassificationResult& from);

  inline ClassificationResult& operator=(const ClassificationResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClassificationResult(ClassificationResult&& from) noexcept
    : ClassificationResult() {
    *this = ::std::move(from);
  }

  inline ClassificationResult& operator=(ClassificationResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ClassificationResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClassificationResult* internal_default_instance() {
    return reinterpret_cast<const ClassificationResult*>(
               &_ClassificationResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void UnsafeArenaSwap(ClassificationResult* other);
  void Swap(ClassificationResult* other);
  friend void swap(ClassificationResult& a, ClassificationResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClassificationResult* New() const final {
    return CreateMaybeMessage<ClassificationResult>(NULL);
  }

  ClassificationResult* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ClassificationResult>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ClassificationResult& from);
  void MergeFrom(const ClassificationResult& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClassificationResult* other);
  protected:
  explicit ClassificationResult(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tensorflow.serving.Classifications classifications = 1;
  int classifications_size() const;
  void clear_classifications();
  static const int kClassificationsFieldNumber = 1;
  ::tensorflow::serving::Classifications* mutable_classifications(int index);
  ::google::protobuf::RepeatedPtrField< ::tensorflow::serving::Classifications >*
      mutable_classifications();
  const ::tensorflow::serving::Classifications& classifications(int index) const;
  ::tensorflow::serving::Classifications* add_classifications();
  const ::google::protobuf::RepeatedPtrField< ::tensorflow::serving::Classifications >&
      classifications() const;

  // @@protoc_insertion_point(class_scope:tensorflow.serving.ClassificationResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::serving::Classifications > classifications_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_tensorflow_5fserving_2fapis_2fclassification_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ClassificationRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.serving.ClassificationRequest) */ {
 public:
  ClassificationRequest();
  virtual ~ClassificationRequest();

  ClassificationRequest(const ClassificationRequest& from);

  inline ClassificationRequest& operator=(const ClassificationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClassificationRequest(ClassificationRequest&& from) noexcept
    : ClassificationRequest() {
    *this = ::std::move(from);
  }

  inline ClassificationRequest& operator=(ClassificationRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ClassificationRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClassificationRequest* internal_default_instance() {
    return reinterpret_cast<const ClassificationRequest*>(
               &_ClassificationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void UnsafeArenaSwap(ClassificationRequest* other);
  void Swap(ClassificationRequest* other);
  friend void swap(ClassificationRequest& a, ClassificationRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClassificationRequest* New() const final {
    return CreateMaybeMessage<ClassificationRequest>(NULL);
  }

  ClassificationRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ClassificationRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ClassificationRequest& from);
  void MergeFrom(const ClassificationRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClassificationRequest* other);
  protected:
  explicit ClassificationRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .tensorflow.serving.ModelSpec model_spec = 1;
  bool has_model_spec() const;
  void clear_model_spec();
  static const int kModelSpecFieldNumber = 1;
  private:
  const ::tensorflow::serving::ModelSpec& _internal_model_spec() const;
  public:
  const ::tensorflow::serving::ModelSpec& model_spec() const;
  ::tensorflow::serving::ModelSpec* release_model_spec();
  ::tensorflow::serving::ModelSpec* mutable_model_spec();
  void set_allocated_model_spec(::tensorflow::serving::ModelSpec* model_spec);
  void unsafe_arena_set_allocated_model_spec(
      ::tensorflow::serving::ModelSpec* model_spec);
  ::tensorflow::serving::ModelSpec* unsafe_arena_release_model_spec();

  // .tensorflow.serving.Input input = 2;
  bool has_input() const;
  void clear_input();
  static const int kInputFieldNumber = 2;
  private:
  const ::tensorflow::serving::Input& _internal_input() const;
  public:
  const ::tensorflow::serving::Input& input() const;
  ::tensorflow::serving::Input* release_input();
  ::tensorflow::serving::Input* mutable_input();
  void set_allocated_input(::tensorflow::serving::Input* input);
  void unsafe_arena_set_allocated_input(
      ::tensorflow::serving::Input* input);
  ::tensorflow::serving::Input* unsafe_arena_release_input();

  // @@protoc_insertion_point(class_scope:tensorflow.serving.ClassificationRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::tensorflow::serving::ModelSpec* model_spec_;
  ::tensorflow::serving::Input* input_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_tensorflow_5fserving_2fapis_2fclassification_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ClassificationResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.serving.ClassificationResponse) */ {
 public:
  ClassificationResponse();
  virtual ~ClassificationResponse();

  ClassificationResponse(const ClassificationResponse& from);

  inline ClassificationResponse& operator=(const ClassificationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClassificationResponse(ClassificationResponse&& from) noexcept
    : ClassificationResponse() {
    *this = ::std::move(from);
  }

  inline ClassificationResponse& operator=(ClassificationResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ClassificationResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClassificationResponse* internal_default_instance() {
    return reinterpret_cast<const ClassificationResponse*>(
               &_ClassificationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void UnsafeArenaSwap(ClassificationResponse* other);
  void Swap(ClassificationResponse* other);
  friend void swap(ClassificationResponse& a, ClassificationResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClassificationResponse* New() const final {
    return CreateMaybeMessage<ClassificationResponse>(NULL);
  }

  ClassificationResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ClassificationResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ClassificationResponse& from);
  void MergeFrom(const ClassificationResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClassificationResponse* other);
  protected:
  explicit ClassificationResponse(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .tensorflow.serving.ClassificationResult result = 1;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  private:
  const ::tensorflow::serving::ClassificationResult& _internal_result() const;
  public:
  const ::tensorflow::serving::ClassificationResult& result() const;
  ::tensorflow::serving::ClassificationResult* release_result();
  ::tensorflow::serving::ClassificationResult* mutable_result();
  void set_allocated_result(::tensorflow::serving::ClassificationResult* result);
  void unsafe_arena_set_allocated_result(
      ::tensorflow::serving::ClassificationResult* result);
  ::tensorflow::serving::ClassificationResult* unsafe_arena_release_result();

  // .tensorflow.serving.ModelSpec model_spec = 2;
  bool has_model_spec() const;
  void clear_model_spec();
  static const int kModelSpecFieldNumber = 2;
  private:
  const ::tensorflow::serving::ModelSpec& _internal_model_spec() const;
  public:
  const ::tensorflow::serving::ModelSpec& model_spec() const;
  ::tensorflow::serving::ModelSpec* release_model_spec();
  ::tensorflow::serving::ModelSpec* mutable_model_spec();
  void set_allocated_model_spec(::tensorflow::serving::ModelSpec* model_spec);
  void unsafe_arena_set_allocated_model_spec(
      ::tensorflow::serving::ModelSpec* model_spec);
  ::tensorflow::serving::ModelSpec* unsafe_arena_release_model_spec();

  // @@protoc_insertion_point(class_scope:tensorflow.serving.ClassificationResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::tensorflow::serving::ClassificationResult* result_;
  ::tensorflow::serving::ModelSpec* model_spec_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_tensorflow_5fserving_2fapis_2fclassification_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Class

// string label = 1;
inline void Class::clear_label() {
  label_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& Class::label() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.Class.label)
  return label_.Get();
}
inline void Class::set_label(const ::std::string& value) {
  
  label_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.serving.Class.label)
}
#if LANG_CXX11
inline void Class::set_label(::std::string&& value) {
  
  label_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.serving.Class.label)
}
#endif
inline void Class::set_label(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  label_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.serving.Class.label)
}
inline void Class::set_label(const char* value,
    size_t size) {
  
  label_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.serving.Class.label)
}
inline ::std::string* Class::mutable_label() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.Class.label)
  return label_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Class::release_label() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.Class.label)
  
  return label_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void Class::set_allocated_label(::std::string* label) {
  if (label != NULL) {
    
  } else {
    
  }
  label_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.Class.label)
}
inline ::std::string* Class::unsafe_arena_release_label() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.serving.Class.label)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return label_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Class::unsafe_arena_set_allocated_label(
    ::std::string* label) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (label != NULL) {
    
  } else {
    
  }
  label_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      label, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.serving.Class.label)
}

// float score = 2;
inline void Class::clear_score() {
  score_ = 0;
}
inline float Class::score() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.Class.score)
  return score_;
}
inline void Class::set_score(float value) {
  
  score_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.serving.Class.score)
}

// -------------------------------------------------------------------

// Classifications

// repeated .tensorflow.serving.Class classes = 1;
inline int Classifications::classes_size() const {
  return classes_.size();
}
inline void Classifications::clear_classes() {
  classes_.Clear();
}
inline ::tensorflow::serving::Class* Classifications::mutable_classes(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.Classifications.classes)
  return classes_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::tensorflow::serving::Class >*
Classifications::mutable_classes() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.serving.Classifications.classes)
  return &classes_;
}
inline const ::tensorflow::serving::Class& Classifications::classes(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.Classifications.classes)
  return classes_.Get(index);
}
inline ::tensorflow::serving::Class* Classifications::add_classes() {
  // @@protoc_insertion_point(field_add:tensorflow.serving.Classifications.classes)
  return classes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tensorflow::serving::Class >&
Classifications::classes() const {
  // @@protoc_insertion_point(field_list:tensorflow.serving.Classifications.classes)
  return classes_;
}

// -------------------------------------------------------------------

// ClassificationResult

// repeated .tensorflow.serving.Classifications classifications = 1;
inline int ClassificationResult::classifications_size() const {
  return classifications_.size();
}
inline void ClassificationResult::clear_classifications() {
  classifications_.Clear();
}
inline ::tensorflow::serving::Classifications* ClassificationResult::mutable_classifications(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.ClassificationResult.classifications)
  return classifications_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::tensorflow::serving::Classifications >*
ClassificationResult::mutable_classifications() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.serving.ClassificationResult.classifications)
  return &classifications_;
}
inline const ::tensorflow::serving::Classifications& ClassificationResult::classifications(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.ClassificationResult.classifications)
  return classifications_.Get(index);
}
inline ::tensorflow::serving::Classifications* ClassificationResult::add_classifications() {
  // @@protoc_insertion_point(field_add:tensorflow.serving.ClassificationResult.classifications)
  return classifications_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tensorflow::serving::Classifications >&
ClassificationResult::classifications() const {
  // @@protoc_insertion_point(field_list:tensorflow.serving.ClassificationResult.classifications)
  return classifications_;
}

// -------------------------------------------------------------------

// ClassificationRequest

// .tensorflow.serving.ModelSpec model_spec = 1;
inline bool ClassificationRequest::has_model_spec() const {
  return this != internal_default_instance() && model_spec_ != NULL;
}
inline const ::tensorflow::serving::ModelSpec& ClassificationRequest::_internal_model_spec() const {
  return *model_spec_;
}
inline const ::tensorflow::serving::ModelSpec& ClassificationRequest::model_spec() const {
  const ::tensorflow::serving::ModelSpec* p = model_spec_;
  // @@protoc_insertion_point(field_get:tensorflow.serving.ClassificationRequest.model_spec)
  return p != NULL ? *p : *reinterpret_cast<const ::tensorflow::serving::ModelSpec*>(
      &::tensorflow::serving::_ModelSpec_default_instance_);
}
inline ::tensorflow::serving::ModelSpec* ClassificationRequest::release_model_spec() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.ClassificationRequest.model_spec)
  
  ::tensorflow::serving::ModelSpec* temp = model_spec_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  model_spec_ = NULL;
  return temp;
}
inline ::tensorflow::serving::ModelSpec* ClassificationRequest::unsafe_arena_release_model_spec() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.serving.ClassificationRequest.model_spec)
  
  ::tensorflow::serving::ModelSpec* temp = model_spec_;
  model_spec_ = NULL;
  return temp;
}
inline ::tensorflow::serving::ModelSpec* ClassificationRequest::mutable_model_spec() {
  
  if (model_spec_ == NULL) {
    auto* p = CreateMaybeMessage<::tensorflow::serving::ModelSpec>(GetArenaNoVirtual());
    model_spec_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.ClassificationRequest.model_spec)
  return model_spec_;
}
inline void ClassificationRequest::set_allocated_model_spec(::tensorflow::serving::ModelSpec* model_spec) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(model_spec_);
  }
  if (model_spec) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(model_spec)->GetArena();
    if (message_arena != submessage_arena) {
      model_spec = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, model_spec, submessage_arena);
    }
    
  } else {
    
  }
  model_spec_ = model_spec;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.ClassificationRequest.model_spec)
}

// .tensorflow.serving.Input input = 2;
inline bool ClassificationRequest::has_input() const {
  return this != internal_default_instance() && input_ != NULL;
}
inline const ::tensorflow::serving::Input& ClassificationRequest::_internal_input() const {
  return *input_;
}
inline const ::tensorflow::serving::Input& ClassificationRequest::input() const {
  const ::tensorflow::serving::Input* p = input_;
  // @@protoc_insertion_point(field_get:tensorflow.serving.ClassificationRequest.input)
  return p != NULL ? *p : *reinterpret_cast<const ::tensorflow::serving::Input*>(
      &::tensorflow::serving::_Input_default_instance_);
}
inline ::tensorflow::serving::Input* ClassificationRequest::release_input() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.ClassificationRequest.input)
  
  ::tensorflow::serving::Input* temp = input_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  input_ = NULL;
  return temp;
}
inline ::tensorflow::serving::Input* ClassificationRequest::unsafe_arena_release_input() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.serving.ClassificationRequest.input)
  
  ::tensorflow::serving::Input* temp = input_;
  input_ = NULL;
  return temp;
}
inline ::tensorflow::serving::Input* ClassificationRequest::mutable_input() {
  
  if (input_ == NULL) {
    auto* p = CreateMaybeMessage<::tensorflow::serving::Input>(GetArenaNoVirtual());
    input_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.ClassificationRequest.input)
  return input_;
}
inline void ClassificationRequest::set_allocated_input(::tensorflow::serving::Input* input) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(input_);
  }
  if (input) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(input)->GetArena();
    if (message_arena != submessage_arena) {
      input = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, input, submessage_arena);
    }
    
  } else {
    
  }
  input_ = input;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.ClassificationRequest.input)
}

// -------------------------------------------------------------------

// ClassificationResponse

// .tensorflow.serving.ModelSpec model_spec = 2;
inline bool ClassificationResponse::has_model_spec() const {
  return this != internal_default_instance() && model_spec_ != NULL;
}
inline const ::tensorflow::serving::ModelSpec& ClassificationResponse::_internal_model_spec() const {
  return *model_spec_;
}
inline const ::tensorflow::serving::ModelSpec& ClassificationResponse::model_spec() const {
  const ::tensorflow::serving::ModelSpec* p = model_spec_;
  // @@protoc_insertion_point(field_get:tensorflow.serving.ClassificationResponse.model_spec)
  return p != NULL ? *p : *reinterpret_cast<const ::tensorflow::serving::ModelSpec*>(
      &::tensorflow::serving::_ModelSpec_default_instance_);
}
inline ::tensorflow::serving::ModelSpec* ClassificationResponse::release_model_spec() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.ClassificationResponse.model_spec)
  
  ::tensorflow::serving::ModelSpec* temp = model_spec_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  model_spec_ = NULL;
  return temp;
}
inline ::tensorflow::serving::ModelSpec* ClassificationResponse::unsafe_arena_release_model_spec() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.serving.ClassificationResponse.model_spec)
  
  ::tensorflow::serving::ModelSpec* temp = model_spec_;
  model_spec_ = NULL;
  return temp;
}
inline ::tensorflow::serving::ModelSpec* ClassificationResponse::mutable_model_spec() {
  
  if (model_spec_ == NULL) {
    auto* p = CreateMaybeMessage<::tensorflow::serving::ModelSpec>(GetArenaNoVirtual());
    model_spec_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.ClassificationResponse.model_spec)
  return model_spec_;
}
inline void ClassificationResponse::set_allocated_model_spec(::tensorflow::serving::ModelSpec* model_spec) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(model_spec_);
  }
  if (model_spec) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(model_spec)->GetArena();
    if (message_arena != submessage_arena) {
      model_spec = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, model_spec, submessage_arena);
    }
    
  } else {
    
  }
  model_spec_ = model_spec;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.ClassificationResponse.model_spec)
}

// .tensorflow.serving.ClassificationResult result = 1;
inline bool ClassificationResponse::has_result() const {
  return this != internal_default_instance() && result_ != NULL;
}
inline void ClassificationResponse::clear_result() {
  if (GetArenaNoVirtual() == NULL && result_ != NULL) {
    delete result_;
  }
  result_ = NULL;
}
inline const ::tensorflow::serving::ClassificationResult& ClassificationResponse::_internal_result() const {
  return *result_;
}
inline const ::tensorflow::serving::ClassificationResult& ClassificationResponse::result() const {
  const ::tensorflow::serving::ClassificationResult* p = result_;
  // @@protoc_insertion_point(field_get:tensorflow.serving.ClassificationResponse.result)
  return p != NULL ? *p : *reinterpret_cast<const ::tensorflow::serving::ClassificationResult*>(
      &::tensorflow::serving::_ClassificationResult_default_instance_);
}
inline ::tensorflow::serving::ClassificationResult* ClassificationResponse::release_result() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.ClassificationResponse.result)
  
  ::tensorflow::serving::ClassificationResult* temp = result_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  result_ = NULL;
  return temp;
}
inline ::tensorflow::serving::ClassificationResult* ClassificationResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.serving.ClassificationResponse.result)
  
  ::tensorflow::serving::ClassificationResult* temp = result_;
  result_ = NULL;
  return temp;
}
inline ::tensorflow::serving::ClassificationResult* ClassificationResponse::mutable_result() {
  
  if (result_ == NULL) {
    auto* p = CreateMaybeMessage<::tensorflow::serving::ClassificationResult>(GetArenaNoVirtual());
    result_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.ClassificationResponse.result)
  return result_;
}
inline void ClassificationResponse::set_allocated_result(::tensorflow::serving::ClassificationResult* result) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete result_;
  }
  if (result) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.ClassificationResponse.result)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace serving
}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_tensorflow_5fserving_2fapis_2fclassification_2eproto
