// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow_serving/apis/model.proto

#include "tensorflow_serving/apis/model.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_google_2fprotobuf_2fwrappers_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fprotobuf_2fwrappers_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Int64Value;
}  // namespace protobuf_google_2fprotobuf_2fwrappers_2eproto
namespace tensorflow {
namespace serving {
class ModelSpecDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ModelSpec>
      _instance;
  const ::google::protobuf::Int64Value* version_;
  ::google::protobuf::internal::ArenaStringPtr version_label_;
} _ModelSpec_default_instance_;
}  // namespace serving
}  // namespace tensorflow
namespace protobuf_tensorflow_5fserving_2fapis_2fmodel_2eproto {
static void InitDefaultsModelSpec() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorflow::serving::_ModelSpec_default_instance_;
    new (ptr) ::tensorflow::serving::ModelSpec();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorflow::serving::ModelSpec::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ModelSpec =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsModelSpec}, {
      &protobuf_google_2fprotobuf_2fwrappers_2eproto::scc_info_Int64Value.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_ModelSpec.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::serving::ModelSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::serving::ModelSpec, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::serving::ModelSpec, name_),
  offsetof(::tensorflow::serving::ModelSpecDefaultTypeInternal, version_),
  offsetof(::tensorflow::serving::ModelSpecDefaultTypeInternal, version_label_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::serving::ModelSpec, signature_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tensorflow::serving::ModelSpec, version_choice_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::tensorflow::serving::ModelSpec)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::tensorflow::serving::_ModelSpec_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "tensorflow_serving/apis/model.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n#tensorflow_serving/apis/model.proto\022\022t"
      "ensorflow.serving\032\036google/protobuf/wrapp"
      "ers.proto\"\214\001\n\tModelSpec\022\014\n\004name\030\001 \001(\t\022.\n"
      "\007version\030\002 \001(\0132\033.google.protobuf.Int64Va"
      "lueH\000\022\027\n\rversion_label\030\004 \001(\tH\000\022\026\n\016signat"
      "ure_name\030\003 \001(\tB\020\n\016version_choiceB\003\370\001\001b\006p"
      "roto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 245);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tensorflow_serving/apis/model.proto", &protobuf_RegisterTypes);
  ::protobuf_google_2fprotobuf_2fwrappers_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_tensorflow_5fserving_2fapis_2fmodel_2eproto
namespace tensorflow {
namespace serving {

// ===================================================================

void ModelSpec::InitAsDefaultInstance() {
  ::tensorflow::serving::_ModelSpec_default_instance_.version_ = const_cast< ::google::protobuf::Int64Value*>(
      ::google::protobuf::Int64Value::internal_default_instance());
  ::tensorflow::serving::_ModelSpec_default_instance_.version_label_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModelSpec::set_allocated_version(::google::protobuf::Int64Value* version) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_version_choice();
  if (version) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(version)->GetArena();
    if (message_arena != submessage_arena) {
      version = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, version, submessage_arena);
    }
    set_has_version();
    version_choice_.version_ = version;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.ModelSpec.version)
}
void ModelSpec::clear_version() {
  if (has_version()) {
    if (GetArenaNoVirtual() == NULL) {
      delete version_choice_.version_;
    }
    clear_has_version_choice();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ModelSpec::kNameFieldNumber;
const int ModelSpec::kVersionFieldNumber;
const int ModelSpec::kVersionLabelFieldNumber;
const int ModelSpec::kSignatureNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ModelSpec::ModelSpec()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tensorflow_5fserving_2fapis_2fmodel_2eproto::scc_info_ModelSpec.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.serving.ModelSpec)
}
ModelSpec::ModelSpec(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::google::protobuf::internal::InitSCC(&protobuf_tensorflow_5fserving_2fapis_2fmodel_2eproto::scc_info_ModelSpec.base);
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.serving.ModelSpec)
}
ModelSpec::ModelSpec(const ModelSpec& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  signature_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.signature_name().size() > 0) {
    signature_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_name(),
      GetArenaNoVirtual());
  }
  clear_has_version_choice();
  switch (from.version_choice_case()) {
    case kVersion: {
      mutable_version()->::google::protobuf::Int64Value::MergeFrom(from.version());
      break;
    }
    case kVersionLabel: {
      set_version_label(from.version_label());
      break;
    }
    case VERSION_CHOICE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.serving.ModelSpec)
}

void ModelSpec::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_version_choice();
}

ModelSpec::~ModelSpec() {
  // @@protoc_insertion_point(destructor:tensorflow.serving.ModelSpec)
  SharedDtor();
}

void ModelSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_version_choice()) {
    clear_version_choice();
  }
}

void ModelSpec::ArenaDtor(void* object) {
  ModelSpec* _this = reinterpret_cast< ModelSpec* >(object);
  (void)_this;
}
void ModelSpec::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ModelSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ModelSpec::descriptor() {
  ::protobuf_tensorflow_5fserving_2fapis_2fmodel_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_5fserving_2fapis_2fmodel_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ModelSpec& ModelSpec::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tensorflow_5fserving_2fapis_2fmodel_2eproto::scc_info_ModelSpec.base);
  return *internal_default_instance();
}


void ModelSpec::clear_version_choice() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.serving.ModelSpec)
  switch (version_choice_case()) {
    case kVersion: {
      if (GetArenaNoVirtual() == NULL) {
        delete version_choice_.version_;
      }
      break;
    }
    case kVersionLabel: {
      version_choice_.version_label_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
          GetArenaNoVirtual());
      break;
    }
    case VERSION_CHOICE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VERSION_CHOICE_NOT_SET;
}


void ModelSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.serving.ModelSpec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  signature_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_version_choice();
  _internal_metadata_.Clear();
}

bool ModelSpec::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.serving.ModelSpec)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.serving.ModelSpec.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Int64Value version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string signature_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signature_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->signature_name().data(), static_cast<int>(this->signature_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.serving.ModelSpec.signature_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string version_label = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version_label()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version_label().data(), static_cast<int>(this->version_label().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.serving.ModelSpec.version_label"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.serving.ModelSpec)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.serving.ModelSpec)
  return false;
#undef DO_
}

void ModelSpec::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.serving.ModelSpec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.serving.ModelSpec.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .google.protobuf.Int64Value version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_version(), output);
  }

  // string signature_name = 3;
  if (this->signature_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->signature_name().data(), static_cast<int>(this->signature_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.serving.ModelSpec.signature_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->signature_name(), output);
  }

  // string version_label = 4;
  if (has_version_label()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version_label().data(), static_cast<int>(this->version_label().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.serving.ModelSpec.version_label");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->version_label(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.serving.ModelSpec)
}

::google::protobuf::uint8* ModelSpec::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.serving.ModelSpec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.serving.ModelSpec.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .google.protobuf.Int64Value version = 2;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_version(), deterministic, target);
  }

  // string signature_name = 3;
  if (this->signature_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->signature_name().data(), static_cast<int>(this->signature_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.serving.ModelSpec.signature_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->signature_name(), target);
  }

  // string version_label = 4;
  if (has_version_label()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version_label().data(), static_cast<int>(this->version_label().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.serving.ModelSpec.version_label");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->version_label(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.serving.ModelSpec)
  return target;
}

size_t ModelSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.serving.ModelSpec)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string signature_name = 3;
  if (this->signature_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->signature_name());
  }

  switch (version_choice_case()) {
    // .google.protobuf.Int64Value version = 2;
    case kVersion: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *version_choice_.version_);
      break;
    }
    // string version_label = 4;
    case kVersionLabel: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version_label());
      break;
    }
    case VERSION_CHOICE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelSpec::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.serving.ModelSpec)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelSpec* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ModelSpec>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.serving.ModelSpec)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.serving.ModelSpec)
    MergeFrom(*source);
  }
}

void ModelSpec::MergeFrom(const ModelSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.serving.ModelSpec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.signature_name().size() > 0) {
    set_signature_name(from.signature_name());
  }
  switch (from.version_choice_case()) {
    case kVersion: {
      mutable_version()->::google::protobuf::Int64Value::MergeFrom(from.version());
      break;
    }
    case kVersionLabel: {
      set_version_label(from.version_label());
      break;
    }
    case VERSION_CHOICE_NOT_SET: {
      break;
    }
  }
}

void ModelSpec::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.serving.ModelSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelSpec::CopyFrom(const ModelSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.serving.ModelSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelSpec::IsInitialized() const {
  return true;
}

void ModelSpec::Swap(ModelSpec* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ModelSpec* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ModelSpec::UnsafeArenaSwap(ModelSpec* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ModelSpec::InternalSwap(ModelSpec* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  signature_name_.Swap(&other->signature_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(version_choice_, other->version_choice_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ModelSpec::GetMetadata() const {
  protobuf_tensorflow_5fserving_2fapis_2fmodel_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tensorflow_5fserving_2fapis_2fmodel_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace serving
}  // namespace tensorflow
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tensorflow::serving::ModelSpec* Arena::CreateMaybeMessage< ::tensorflow::serving::ModelSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::serving::ModelSpec >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
