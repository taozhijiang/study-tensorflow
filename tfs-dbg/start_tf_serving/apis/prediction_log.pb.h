// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow_serving/apis/prediction_log.proto

#ifndef PROTOBUF_INCLUDED_tensorflow_5fserving_2fapis_2fprediction_5flog_2eproto
#define PROTOBUF_INCLUDED_tensorflow_5fserving_2fapis_2fprediction_5flog_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "tensorflow_serving/apis/classification.pb.h"
#include "tensorflow_serving/apis/inference.pb.h"
#include "tensorflow_serving/apis/predict.pb.h"
#include "tensorflow_serving/apis/regression.pb.h"
#include "tensorflow_serving/apis/session_service.pb.h"
#include "tensorflow_serving/core/logging.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_tensorflow_5fserving_2fapis_2fprediction_5flog_2eproto 

namespace protobuf_tensorflow_5fserving_2fapis_2fprediction_5flog_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_tensorflow_5fserving_2fapis_2fprediction_5flog_2eproto
namespace tensorflow {
namespace serving {
class ClassifyLog;
class ClassifyLogDefaultTypeInternal;
extern ClassifyLogDefaultTypeInternal _ClassifyLog_default_instance_;
class MultiInferenceLog;
class MultiInferenceLogDefaultTypeInternal;
extern MultiInferenceLogDefaultTypeInternal _MultiInferenceLog_default_instance_;
class PredictLog;
class PredictLogDefaultTypeInternal;
extern PredictLogDefaultTypeInternal _PredictLog_default_instance_;
class PredictionLog;
class PredictionLogDefaultTypeInternal;
extern PredictionLogDefaultTypeInternal _PredictionLog_default_instance_;
class RegressLog;
class RegressLogDefaultTypeInternal;
extern RegressLogDefaultTypeInternal _RegressLog_default_instance_;
class SessionRunLog;
class SessionRunLogDefaultTypeInternal;
extern SessionRunLogDefaultTypeInternal _SessionRunLog_default_instance_;
}  // namespace serving
}  // namespace tensorflow
namespace google {
namespace protobuf {
template<> ::tensorflow::serving::ClassifyLog* Arena::CreateMaybeMessage<::tensorflow::serving::ClassifyLog>(Arena*);
template<> ::tensorflow::serving::MultiInferenceLog* Arena::CreateMaybeMessage<::tensorflow::serving::MultiInferenceLog>(Arena*);
template<> ::tensorflow::serving::PredictLog* Arena::CreateMaybeMessage<::tensorflow::serving::PredictLog>(Arena*);
template<> ::tensorflow::serving::PredictionLog* Arena::CreateMaybeMessage<::tensorflow::serving::PredictionLog>(Arena*);
template<> ::tensorflow::serving::RegressLog* Arena::CreateMaybeMessage<::tensorflow::serving::RegressLog>(Arena*);
template<> ::tensorflow::serving::SessionRunLog* Arena::CreateMaybeMessage<::tensorflow::serving::SessionRunLog>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace tensorflow {
namespace serving {

// ===================================================================

class ClassifyLog : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.serving.ClassifyLog) */ {
 public:
  ClassifyLog();
  virtual ~ClassifyLog();

  ClassifyLog(const ClassifyLog& from);

  inline ClassifyLog& operator=(const ClassifyLog& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClassifyLog(ClassifyLog&& from) noexcept
    : ClassifyLog() {
    *this = ::std::move(from);
  }

  inline ClassifyLog& operator=(ClassifyLog&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ClassifyLog& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClassifyLog* internal_default_instance() {
    return reinterpret_cast<const ClassifyLog*>(
               &_ClassifyLog_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void UnsafeArenaSwap(ClassifyLog* other);
  void Swap(ClassifyLog* other);
  friend void swap(ClassifyLog& a, ClassifyLog& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClassifyLog* New() const final {
    return CreateMaybeMessage<ClassifyLog>(NULL);
  }

  ClassifyLog* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ClassifyLog>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ClassifyLog& from);
  void MergeFrom(const ClassifyLog& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClassifyLog* other);
  protected:
  explicit ClassifyLog(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .tensorflow.serving.ClassificationRequest request = 1;
  bool has_request() const;
  void clear_request();
  static const int kRequestFieldNumber = 1;
  private:
  const ::tensorflow::serving::ClassificationRequest& _internal_request() const;
  public:
  const ::tensorflow::serving::ClassificationRequest& request() const;
  ::tensorflow::serving::ClassificationRequest* release_request();
  ::tensorflow::serving::ClassificationRequest* mutable_request();
  void set_allocated_request(::tensorflow::serving::ClassificationRequest* request);
  void unsafe_arena_set_allocated_request(
      ::tensorflow::serving::ClassificationRequest* request);
  ::tensorflow::serving::ClassificationRequest* unsafe_arena_release_request();

  // .tensorflow.serving.ClassificationResponse response = 2;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 2;
  private:
  const ::tensorflow::serving::ClassificationResponse& _internal_response() const;
  public:
  const ::tensorflow::serving::ClassificationResponse& response() const;
  ::tensorflow::serving::ClassificationResponse* release_response();
  ::tensorflow::serving::ClassificationResponse* mutable_response();
  void set_allocated_response(::tensorflow::serving::ClassificationResponse* response);
  void unsafe_arena_set_allocated_response(
      ::tensorflow::serving::ClassificationResponse* response);
  ::tensorflow::serving::ClassificationResponse* unsafe_arena_release_response();

  // @@protoc_insertion_point(class_scope:tensorflow.serving.ClassifyLog)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::tensorflow::serving::ClassificationRequest* request_;
  ::tensorflow::serving::ClassificationResponse* response_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_tensorflow_5fserving_2fapis_2fprediction_5flog_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RegressLog : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.serving.RegressLog) */ {
 public:
  RegressLog();
  virtual ~RegressLog();

  RegressLog(const RegressLog& from);

  inline RegressLog& operator=(const RegressLog& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RegressLog(RegressLog&& from) noexcept
    : RegressLog() {
    *this = ::std::move(from);
  }

  inline RegressLog& operator=(RegressLog&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const RegressLog& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegressLog* internal_default_instance() {
    return reinterpret_cast<const RegressLog*>(
               &_RegressLog_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void UnsafeArenaSwap(RegressLog* other);
  void Swap(RegressLog* other);
  friend void swap(RegressLog& a, RegressLog& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RegressLog* New() const final {
    return CreateMaybeMessage<RegressLog>(NULL);
  }

  RegressLog* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RegressLog>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RegressLog& from);
  void MergeFrom(const RegressLog& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegressLog* other);
  protected:
  explicit RegressLog(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .tensorflow.serving.RegressionRequest request = 1;
  bool has_request() const;
  void clear_request();
  static const int kRequestFieldNumber = 1;
  private:
  const ::tensorflow::serving::RegressionRequest& _internal_request() const;
  public:
  const ::tensorflow::serving::RegressionRequest& request() const;
  ::tensorflow::serving::RegressionRequest* release_request();
  ::tensorflow::serving::RegressionRequest* mutable_request();
  void set_allocated_request(::tensorflow::serving::RegressionRequest* request);
  void unsafe_arena_set_allocated_request(
      ::tensorflow::serving::RegressionRequest* request);
  ::tensorflow::serving::RegressionRequest* unsafe_arena_release_request();

  // .tensorflow.serving.RegressionResponse response = 2;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 2;
  private:
  const ::tensorflow::serving::RegressionResponse& _internal_response() const;
  public:
  const ::tensorflow::serving::RegressionResponse& response() const;
  ::tensorflow::serving::RegressionResponse* release_response();
  ::tensorflow::serving::RegressionResponse* mutable_response();
  void set_allocated_response(::tensorflow::serving::RegressionResponse* response);
  void unsafe_arena_set_allocated_response(
      ::tensorflow::serving::RegressionResponse* response);
  ::tensorflow::serving::RegressionResponse* unsafe_arena_release_response();

  // @@protoc_insertion_point(class_scope:tensorflow.serving.RegressLog)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::tensorflow::serving::RegressionRequest* request_;
  ::tensorflow::serving::RegressionResponse* response_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_tensorflow_5fserving_2fapis_2fprediction_5flog_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PredictLog : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.serving.PredictLog) */ {
 public:
  PredictLog();
  virtual ~PredictLog();

  PredictLog(const PredictLog& from);

  inline PredictLog& operator=(const PredictLog& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PredictLog(PredictLog&& from) noexcept
    : PredictLog() {
    *this = ::std::move(from);
  }

  inline PredictLog& operator=(PredictLog&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const PredictLog& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PredictLog* internal_default_instance() {
    return reinterpret_cast<const PredictLog*>(
               &_PredictLog_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void UnsafeArenaSwap(PredictLog* other);
  void Swap(PredictLog* other);
  friend void swap(PredictLog& a, PredictLog& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PredictLog* New() const final {
    return CreateMaybeMessage<PredictLog>(NULL);
  }

  PredictLog* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PredictLog>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PredictLog& from);
  void MergeFrom(const PredictLog& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PredictLog* other);
  protected:
  explicit PredictLog(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .tensorflow.serving.PredictRequest request = 1;
  bool has_request() const;
  void clear_request();
  static const int kRequestFieldNumber = 1;
  private:
  const ::tensorflow::serving::PredictRequest& _internal_request() const;
  public:
  const ::tensorflow::serving::PredictRequest& request() const;
  ::tensorflow::serving::PredictRequest* release_request();
  ::tensorflow::serving::PredictRequest* mutable_request();
  void set_allocated_request(::tensorflow::serving::PredictRequest* request);
  void unsafe_arena_set_allocated_request(
      ::tensorflow::serving::PredictRequest* request);
  ::tensorflow::serving::PredictRequest* unsafe_arena_release_request();

  // .tensorflow.serving.PredictResponse response = 2;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 2;
  private:
  const ::tensorflow::serving::PredictResponse& _internal_response() const;
  public:
  const ::tensorflow::serving::PredictResponse& response() const;
  ::tensorflow::serving::PredictResponse* release_response();
  ::tensorflow::serving::PredictResponse* mutable_response();
  void set_allocated_response(::tensorflow::serving::PredictResponse* response);
  void unsafe_arena_set_allocated_response(
      ::tensorflow::serving::PredictResponse* response);
  ::tensorflow::serving::PredictResponse* unsafe_arena_release_response();

  // @@protoc_insertion_point(class_scope:tensorflow.serving.PredictLog)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::tensorflow::serving::PredictRequest* request_;
  ::tensorflow::serving::PredictResponse* response_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_tensorflow_5fserving_2fapis_2fprediction_5flog_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MultiInferenceLog : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.serving.MultiInferenceLog) */ {
 public:
  MultiInferenceLog();
  virtual ~MultiInferenceLog();

  MultiInferenceLog(const MultiInferenceLog& from);

  inline MultiInferenceLog& operator=(const MultiInferenceLog& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MultiInferenceLog(MultiInferenceLog&& from) noexcept
    : MultiInferenceLog() {
    *this = ::std::move(from);
  }

  inline MultiInferenceLog& operator=(MultiInferenceLog&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const MultiInferenceLog& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MultiInferenceLog* internal_default_instance() {
    return reinterpret_cast<const MultiInferenceLog*>(
               &_MultiInferenceLog_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void UnsafeArenaSwap(MultiInferenceLog* other);
  void Swap(MultiInferenceLog* other);
  friend void swap(MultiInferenceLog& a, MultiInferenceLog& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MultiInferenceLog* New() const final {
    return CreateMaybeMessage<MultiInferenceLog>(NULL);
  }

  MultiInferenceLog* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MultiInferenceLog>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MultiInferenceLog& from);
  void MergeFrom(const MultiInferenceLog& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiInferenceLog* other);
  protected:
  explicit MultiInferenceLog(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .tensorflow.serving.MultiInferenceRequest request = 1;
  bool has_request() const;
  void clear_request();
  static const int kRequestFieldNumber = 1;
  private:
  const ::tensorflow::serving::MultiInferenceRequest& _internal_request() const;
  public:
  const ::tensorflow::serving::MultiInferenceRequest& request() const;
  ::tensorflow::serving::MultiInferenceRequest* release_request();
  ::tensorflow::serving::MultiInferenceRequest* mutable_request();
  void set_allocated_request(::tensorflow::serving::MultiInferenceRequest* request);
  void unsafe_arena_set_allocated_request(
      ::tensorflow::serving::MultiInferenceRequest* request);
  ::tensorflow::serving::MultiInferenceRequest* unsafe_arena_release_request();

  // .tensorflow.serving.MultiInferenceResponse response = 2;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 2;
  private:
  const ::tensorflow::serving::MultiInferenceResponse& _internal_response() const;
  public:
  const ::tensorflow::serving::MultiInferenceResponse& response() const;
  ::tensorflow::serving::MultiInferenceResponse* release_response();
  ::tensorflow::serving::MultiInferenceResponse* mutable_response();
  void set_allocated_response(::tensorflow::serving::MultiInferenceResponse* response);
  void unsafe_arena_set_allocated_response(
      ::tensorflow::serving::MultiInferenceResponse* response);
  ::tensorflow::serving::MultiInferenceResponse* unsafe_arena_release_response();

  // @@protoc_insertion_point(class_scope:tensorflow.serving.MultiInferenceLog)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::tensorflow::serving::MultiInferenceRequest* request_;
  ::tensorflow::serving::MultiInferenceResponse* response_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_tensorflow_5fserving_2fapis_2fprediction_5flog_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SessionRunLog : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.serving.SessionRunLog) */ {
 public:
  SessionRunLog();
  virtual ~SessionRunLog();

  SessionRunLog(const SessionRunLog& from);

  inline SessionRunLog& operator=(const SessionRunLog& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SessionRunLog(SessionRunLog&& from) noexcept
    : SessionRunLog() {
    *this = ::std::move(from);
  }

  inline SessionRunLog& operator=(SessionRunLog&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const SessionRunLog& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SessionRunLog* internal_default_instance() {
    return reinterpret_cast<const SessionRunLog*>(
               &_SessionRunLog_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void UnsafeArenaSwap(SessionRunLog* other);
  void Swap(SessionRunLog* other);
  friend void swap(SessionRunLog& a, SessionRunLog& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SessionRunLog* New() const final {
    return CreateMaybeMessage<SessionRunLog>(NULL);
  }

  SessionRunLog* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SessionRunLog>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SessionRunLog& from);
  void MergeFrom(const SessionRunLog& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SessionRunLog* other);
  protected:
  explicit SessionRunLog(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .tensorflow.serving.SessionRunRequest request = 1;
  bool has_request() const;
  void clear_request();
  static const int kRequestFieldNumber = 1;
  private:
  const ::tensorflow::serving::SessionRunRequest& _internal_request() const;
  public:
  const ::tensorflow::serving::SessionRunRequest& request() const;
  ::tensorflow::serving::SessionRunRequest* release_request();
  ::tensorflow::serving::SessionRunRequest* mutable_request();
  void set_allocated_request(::tensorflow::serving::SessionRunRequest* request);
  void unsafe_arena_set_allocated_request(
      ::tensorflow::serving::SessionRunRequest* request);
  ::tensorflow::serving::SessionRunRequest* unsafe_arena_release_request();

  // .tensorflow.serving.SessionRunResponse response = 2;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 2;
  private:
  const ::tensorflow::serving::SessionRunResponse& _internal_response() const;
  public:
  const ::tensorflow::serving::SessionRunResponse& response() const;
  ::tensorflow::serving::SessionRunResponse* release_response();
  ::tensorflow::serving::SessionRunResponse* mutable_response();
  void set_allocated_response(::tensorflow::serving::SessionRunResponse* response);
  void unsafe_arena_set_allocated_response(
      ::tensorflow::serving::SessionRunResponse* response);
  ::tensorflow::serving::SessionRunResponse* unsafe_arena_release_response();

  // @@protoc_insertion_point(class_scope:tensorflow.serving.SessionRunLog)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::tensorflow::serving::SessionRunRequest* request_;
  ::tensorflow::serving::SessionRunResponse* response_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_tensorflow_5fserving_2fapis_2fprediction_5flog_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PredictionLog : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.serving.PredictionLog) */ {
 public:
  PredictionLog();
  virtual ~PredictionLog();

  PredictionLog(const PredictionLog& from);

  inline PredictionLog& operator=(const PredictionLog& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PredictionLog(PredictionLog&& from) noexcept
    : PredictionLog() {
    *this = ::std::move(from);
  }

  inline PredictionLog& operator=(PredictionLog&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const PredictionLog& default_instance();

  enum LogTypeCase {
    kClassifyLog = 2,
    kRegressLog = 3,
    kPredictLog = 6,
    kMultiInferenceLog = 4,
    kSessionRunLog = 5,
    LOG_TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PredictionLog* internal_default_instance() {
    return reinterpret_cast<const PredictionLog*>(
               &_PredictionLog_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void UnsafeArenaSwap(PredictionLog* other);
  void Swap(PredictionLog* other);
  friend void swap(PredictionLog& a, PredictionLog& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PredictionLog* New() const final {
    return CreateMaybeMessage<PredictionLog>(NULL);
  }

  PredictionLog* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PredictionLog>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PredictionLog& from);
  void MergeFrom(const PredictionLog& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PredictionLog* other);
  protected:
  explicit PredictionLog(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .tensorflow.serving.LogMetadata log_metadata = 1;
  bool has_log_metadata() const;
  void clear_log_metadata();
  static const int kLogMetadataFieldNumber = 1;
  private:
  const ::tensorflow::serving::LogMetadata& _internal_log_metadata() const;
  public:
  const ::tensorflow::serving::LogMetadata& log_metadata() const;
  ::tensorflow::serving::LogMetadata* release_log_metadata();
  ::tensorflow::serving::LogMetadata* mutable_log_metadata();
  void set_allocated_log_metadata(::tensorflow::serving::LogMetadata* log_metadata);
  void unsafe_arena_set_allocated_log_metadata(
      ::tensorflow::serving::LogMetadata* log_metadata);
  ::tensorflow::serving::LogMetadata* unsafe_arena_release_log_metadata();

  // .tensorflow.serving.ClassifyLog classify_log = 2;
  bool has_classify_log() const;
  void clear_classify_log();
  static const int kClassifyLogFieldNumber = 2;
  private:
  const ::tensorflow::serving::ClassifyLog& _internal_classify_log() const;
  public:
  const ::tensorflow::serving::ClassifyLog& classify_log() const;
  ::tensorflow::serving::ClassifyLog* release_classify_log();
  ::tensorflow::serving::ClassifyLog* mutable_classify_log();
  void set_allocated_classify_log(::tensorflow::serving::ClassifyLog* classify_log);
  void unsafe_arena_set_allocated_classify_log(
      ::tensorflow::serving::ClassifyLog* classify_log);
  ::tensorflow::serving::ClassifyLog* unsafe_arena_release_classify_log();

  // .tensorflow.serving.RegressLog regress_log = 3;
  bool has_regress_log() const;
  void clear_regress_log();
  static const int kRegressLogFieldNumber = 3;
  private:
  const ::tensorflow::serving::RegressLog& _internal_regress_log() const;
  public:
  const ::tensorflow::serving::RegressLog& regress_log() const;
  ::tensorflow::serving::RegressLog* release_regress_log();
  ::tensorflow::serving::RegressLog* mutable_regress_log();
  void set_allocated_regress_log(::tensorflow::serving::RegressLog* regress_log);
  void unsafe_arena_set_allocated_regress_log(
      ::tensorflow::serving::RegressLog* regress_log);
  ::tensorflow::serving::RegressLog* unsafe_arena_release_regress_log();

  // .tensorflow.serving.PredictLog predict_log = 6;
  bool has_predict_log() const;
  void clear_predict_log();
  static const int kPredictLogFieldNumber = 6;
  private:
  const ::tensorflow::serving::PredictLog& _internal_predict_log() const;
  public:
  const ::tensorflow::serving::PredictLog& predict_log() const;
  ::tensorflow::serving::PredictLog* release_predict_log();
  ::tensorflow::serving::PredictLog* mutable_predict_log();
  void set_allocated_predict_log(::tensorflow::serving::PredictLog* predict_log);
  void unsafe_arena_set_allocated_predict_log(
      ::tensorflow::serving::PredictLog* predict_log);
  ::tensorflow::serving::PredictLog* unsafe_arena_release_predict_log();

  // .tensorflow.serving.MultiInferenceLog multi_inference_log = 4;
  bool has_multi_inference_log() const;
  void clear_multi_inference_log();
  static const int kMultiInferenceLogFieldNumber = 4;
  private:
  const ::tensorflow::serving::MultiInferenceLog& _internal_multi_inference_log() const;
  public:
  const ::tensorflow::serving::MultiInferenceLog& multi_inference_log() const;
  ::tensorflow::serving::MultiInferenceLog* release_multi_inference_log();
  ::tensorflow::serving::MultiInferenceLog* mutable_multi_inference_log();
  void set_allocated_multi_inference_log(::tensorflow::serving::MultiInferenceLog* multi_inference_log);
  void unsafe_arena_set_allocated_multi_inference_log(
      ::tensorflow::serving::MultiInferenceLog* multi_inference_log);
  ::tensorflow::serving::MultiInferenceLog* unsafe_arena_release_multi_inference_log();

  // .tensorflow.serving.SessionRunLog session_run_log = 5;
  bool has_session_run_log() const;
  void clear_session_run_log();
  static const int kSessionRunLogFieldNumber = 5;
  private:
  const ::tensorflow::serving::SessionRunLog& _internal_session_run_log() const;
  public:
  const ::tensorflow::serving::SessionRunLog& session_run_log() const;
  ::tensorflow::serving::SessionRunLog* release_session_run_log();
  ::tensorflow::serving::SessionRunLog* mutable_session_run_log();
  void set_allocated_session_run_log(::tensorflow::serving::SessionRunLog* session_run_log);
  void unsafe_arena_set_allocated_session_run_log(
      ::tensorflow::serving::SessionRunLog* session_run_log);
  ::tensorflow::serving::SessionRunLog* unsafe_arena_release_session_run_log();

  void clear_log_type();
  LogTypeCase log_type_case() const;
  // @@protoc_insertion_point(class_scope:tensorflow.serving.PredictionLog)
 private:
  void set_has_classify_log();
  void set_has_regress_log();
  void set_has_predict_log();
  void set_has_multi_inference_log();
  void set_has_session_run_log();

  inline bool has_log_type() const;
  inline void clear_has_log_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::tensorflow::serving::LogMetadata* log_metadata_;
  union LogTypeUnion {
    LogTypeUnion() {}
    ::tensorflow::serving::ClassifyLog* classify_log_;
    ::tensorflow::serving::RegressLog* regress_log_;
    ::tensorflow::serving::PredictLog* predict_log_;
    ::tensorflow::serving::MultiInferenceLog* multi_inference_log_;
    ::tensorflow::serving::SessionRunLog* session_run_log_;
  } log_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_tensorflow_5fserving_2fapis_2fprediction_5flog_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ClassifyLog

// .tensorflow.serving.ClassificationRequest request = 1;
inline bool ClassifyLog::has_request() const {
  return this != internal_default_instance() && request_ != NULL;
}
inline const ::tensorflow::serving::ClassificationRequest& ClassifyLog::_internal_request() const {
  return *request_;
}
inline const ::tensorflow::serving::ClassificationRequest& ClassifyLog::request() const {
  const ::tensorflow::serving::ClassificationRequest* p = request_;
  // @@protoc_insertion_point(field_get:tensorflow.serving.ClassifyLog.request)
  return p != NULL ? *p : *reinterpret_cast<const ::tensorflow::serving::ClassificationRequest*>(
      &::tensorflow::serving::_ClassificationRequest_default_instance_);
}
inline ::tensorflow::serving::ClassificationRequest* ClassifyLog::release_request() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.ClassifyLog.request)
  
  ::tensorflow::serving::ClassificationRequest* temp = request_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  request_ = NULL;
  return temp;
}
inline ::tensorflow::serving::ClassificationRequest* ClassifyLog::unsafe_arena_release_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.serving.ClassifyLog.request)
  
  ::tensorflow::serving::ClassificationRequest* temp = request_;
  request_ = NULL;
  return temp;
}
inline ::tensorflow::serving::ClassificationRequest* ClassifyLog::mutable_request() {
  
  if (request_ == NULL) {
    auto* p = CreateMaybeMessage<::tensorflow::serving::ClassificationRequest>(GetArenaNoVirtual());
    request_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.ClassifyLog.request)
  return request_;
}
inline void ClassifyLog::set_allocated_request(::tensorflow::serving::ClassificationRequest* request) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(request_);
  }
  if (request) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(request)->GetArena();
    if (message_arena != submessage_arena) {
      request = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, request, submessage_arena);
    }
    
  } else {
    
  }
  request_ = request;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.ClassifyLog.request)
}

// .tensorflow.serving.ClassificationResponse response = 2;
inline bool ClassifyLog::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
inline const ::tensorflow::serving::ClassificationResponse& ClassifyLog::_internal_response() const {
  return *response_;
}
inline const ::tensorflow::serving::ClassificationResponse& ClassifyLog::response() const {
  const ::tensorflow::serving::ClassificationResponse* p = response_;
  // @@protoc_insertion_point(field_get:tensorflow.serving.ClassifyLog.response)
  return p != NULL ? *p : *reinterpret_cast<const ::tensorflow::serving::ClassificationResponse*>(
      &::tensorflow::serving::_ClassificationResponse_default_instance_);
}
inline ::tensorflow::serving::ClassificationResponse* ClassifyLog::release_response() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.ClassifyLog.response)
  
  ::tensorflow::serving::ClassificationResponse* temp = response_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  response_ = NULL;
  return temp;
}
inline ::tensorflow::serving::ClassificationResponse* ClassifyLog::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.serving.ClassifyLog.response)
  
  ::tensorflow::serving::ClassificationResponse* temp = response_;
  response_ = NULL;
  return temp;
}
inline ::tensorflow::serving::ClassificationResponse* ClassifyLog::mutable_response() {
  
  if (response_ == NULL) {
    auto* p = CreateMaybeMessage<::tensorflow::serving::ClassificationResponse>(GetArenaNoVirtual());
    response_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.ClassifyLog.response)
  return response_;
}
inline void ClassifyLog::set_allocated_response(::tensorflow::serving::ClassificationResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(response_);
  }
  if (response) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(response)->GetArena();
    if (message_arena != submessage_arena) {
      response = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    
  } else {
    
  }
  response_ = response;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.ClassifyLog.response)
}

// -------------------------------------------------------------------

// RegressLog

// .tensorflow.serving.RegressionRequest request = 1;
inline bool RegressLog::has_request() const {
  return this != internal_default_instance() && request_ != NULL;
}
inline const ::tensorflow::serving::RegressionRequest& RegressLog::_internal_request() const {
  return *request_;
}
inline const ::tensorflow::serving::RegressionRequest& RegressLog::request() const {
  const ::tensorflow::serving::RegressionRequest* p = request_;
  // @@protoc_insertion_point(field_get:tensorflow.serving.RegressLog.request)
  return p != NULL ? *p : *reinterpret_cast<const ::tensorflow::serving::RegressionRequest*>(
      &::tensorflow::serving::_RegressionRequest_default_instance_);
}
inline ::tensorflow::serving::RegressionRequest* RegressLog::release_request() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.RegressLog.request)
  
  ::tensorflow::serving::RegressionRequest* temp = request_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  request_ = NULL;
  return temp;
}
inline ::tensorflow::serving::RegressionRequest* RegressLog::unsafe_arena_release_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.serving.RegressLog.request)
  
  ::tensorflow::serving::RegressionRequest* temp = request_;
  request_ = NULL;
  return temp;
}
inline ::tensorflow::serving::RegressionRequest* RegressLog::mutable_request() {
  
  if (request_ == NULL) {
    auto* p = CreateMaybeMessage<::tensorflow::serving::RegressionRequest>(GetArenaNoVirtual());
    request_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.RegressLog.request)
  return request_;
}
inline void RegressLog::set_allocated_request(::tensorflow::serving::RegressionRequest* request) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(request_);
  }
  if (request) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(request)->GetArena();
    if (message_arena != submessage_arena) {
      request = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, request, submessage_arena);
    }
    
  } else {
    
  }
  request_ = request;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.RegressLog.request)
}

// .tensorflow.serving.RegressionResponse response = 2;
inline bool RegressLog::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
inline const ::tensorflow::serving::RegressionResponse& RegressLog::_internal_response() const {
  return *response_;
}
inline const ::tensorflow::serving::RegressionResponse& RegressLog::response() const {
  const ::tensorflow::serving::RegressionResponse* p = response_;
  // @@protoc_insertion_point(field_get:tensorflow.serving.RegressLog.response)
  return p != NULL ? *p : *reinterpret_cast<const ::tensorflow::serving::RegressionResponse*>(
      &::tensorflow::serving::_RegressionResponse_default_instance_);
}
inline ::tensorflow::serving::RegressionResponse* RegressLog::release_response() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.RegressLog.response)
  
  ::tensorflow::serving::RegressionResponse* temp = response_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  response_ = NULL;
  return temp;
}
inline ::tensorflow::serving::RegressionResponse* RegressLog::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.serving.RegressLog.response)
  
  ::tensorflow::serving::RegressionResponse* temp = response_;
  response_ = NULL;
  return temp;
}
inline ::tensorflow::serving::RegressionResponse* RegressLog::mutable_response() {
  
  if (response_ == NULL) {
    auto* p = CreateMaybeMessage<::tensorflow::serving::RegressionResponse>(GetArenaNoVirtual());
    response_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.RegressLog.response)
  return response_;
}
inline void RegressLog::set_allocated_response(::tensorflow::serving::RegressionResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(response_);
  }
  if (response) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(response)->GetArena();
    if (message_arena != submessage_arena) {
      response = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    
  } else {
    
  }
  response_ = response;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.RegressLog.response)
}

// -------------------------------------------------------------------

// PredictLog

// .tensorflow.serving.PredictRequest request = 1;
inline bool PredictLog::has_request() const {
  return this != internal_default_instance() && request_ != NULL;
}
inline const ::tensorflow::serving::PredictRequest& PredictLog::_internal_request() const {
  return *request_;
}
inline const ::tensorflow::serving::PredictRequest& PredictLog::request() const {
  const ::tensorflow::serving::PredictRequest* p = request_;
  // @@protoc_insertion_point(field_get:tensorflow.serving.PredictLog.request)
  return p != NULL ? *p : *reinterpret_cast<const ::tensorflow::serving::PredictRequest*>(
      &::tensorflow::serving::_PredictRequest_default_instance_);
}
inline ::tensorflow::serving::PredictRequest* PredictLog::release_request() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.PredictLog.request)
  
  ::tensorflow::serving::PredictRequest* temp = request_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  request_ = NULL;
  return temp;
}
inline ::tensorflow::serving::PredictRequest* PredictLog::unsafe_arena_release_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.serving.PredictLog.request)
  
  ::tensorflow::serving::PredictRequest* temp = request_;
  request_ = NULL;
  return temp;
}
inline ::tensorflow::serving::PredictRequest* PredictLog::mutable_request() {
  
  if (request_ == NULL) {
    auto* p = CreateMaybeMessage<::tensorflow::serving::PredictRequest>(GetArenaNoVirtual());
    request_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.PredictLog.request)
  return request_;
}
inline void PredictLog::set_allocated_request(::tensorflow::serving::PredictRequest* request) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(request_);
  }
  if (request) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(request)->GetArena();
    if (message_arena != submessage_arena) {
      request = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, request, submessage_arena);
    }
    
  } else {
    
  }
  request_ = request;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.PredictLog.request)
}

// .tensorflow.serving.PredictResponse response = 2;
inline bool PredictLog::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
inline const ::tensorflow::serving::PredictResponse& PredictLog::_internal_response() const {
  return *response_;
}
inline const ::tensorflow::serving::PredictResponse& PredictLog::response() const {
  const ::tensorflow::serving::PredictResponse* p = response_;
  // @@protoc_insertion_point(field_get:tensorflow.serving.PredictLog.response)
  return p != NULL ? *p : *reinterpret_cast<const ::tensorflow::serving::PredictResponse*>(
      &::tensorflow::serving::_PredictResponse_default_instance_);
}
inline ::tensorflow::serving::PredictResponse* PredictLog::release_response() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.PredictLog.response)
  
  ::tensorflow::serving::PredictResponse* temp = response_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  response_ = NULL;
  return temp;
}
inline ::tensorflow::serving::PredictResponse* PredictLog::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.serving.PredictLog.response)
  
  ::tensorflow::serving::PredictResponse* temp = response_;
  response_ = NULL;
  return temp;
}
inline ::tensorflow::serving::PredictResponse* PredictLog::mutable_response() {
  
  if (response_ == NULL) {
    auto* p = CreateMaybeMessage<::tensorflow::serving::PredictResponse>(GetArenaNoVirtual());
    response_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.PredictLog.response)
  return response_;
}
inline void PredictLog::set_allocated_response(::tensorflow::serving::PredictResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(response_);
  }
  if (response) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(response)->GetArena();
    if (message_arena != submessage_arena) {
      response = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    
  } else {
    
  }
  response_ = response;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.PredictLog.response)
}

// -------------------------------------------------------------------

// MultiInferenceLog

// .tensorflow.serving.MultiInferenceRequest request = 1;
inline bool MultiInferenceLog::has_request() const {
  return this != internal_default_instance() && request_ != NULL;
}
inline const ::tensorflow::serving::MultiInferenceRequest& MultiInferenceLog::_internal_request() const {
  return *request_;
}
inline const ::tensorflow::serving::MultiInferenceRequest& MultiInferenceLog::request() const {
  const ::tensorflow::serving::MultiInferenceRequest* p = request_;
  // @@protoc_insertion_point(field_get:tensorflow.serving.MultiInferenceLog.request)
  return p != NULL ? *p : *reinterpret_cast<const ::tensorflow::serving::MultiInferenceRequest*>(
      &::tensorflow::serving::_MultiInferenceRequest_default_instance_);
}
inline ::tensorflow::serving::MultiInferenceRequest* MultiInferenceLog::release_request() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.MultiInferenceLog.request)
  
  ::tensorflow::serving::MultiInferenceRequest* temp = request_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  request_ = NULL;
  return temp;
}
inline ::tensorflow::serving::MultiInferenceRequest* MultiInferenceLog::unsafe_arena_release_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.serving.MultiInferenceLog.request)
  
  ::tensorflow::serving::MultiInferenceRequest* temp = request_;
  request_ = NULL;
  return temp;
}
inline ::tensorflow::serving::MultiInferenceRequest* MultiInferenceLog::mutable_request() {
  
  if (request_ == NULL) {
    auto* p = CreateMaybeMessage<::tensorflow::serving::MultiInferenceRequest>(GetArenaNoVirtual());
    request_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.MultiInferenceLog.request)
  return request_;
}
inline void MultiInferenceLog::set_allocated_request(::tensorflow::serving::MultiInferenceRequest* request) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(request_);
  }
  if (request) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(request)->GetArena();
    if (message_arena != submessage_arena) {
      request = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, request, submessage_arena);
    }
    
  } else {
    
  }
  request_ = request;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.MultiInferenceLog.request)
}

// .tensorflow.serving.MultiInferenceResponse response = 2;
inline bool MultiInferenceLog::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
inline const ::tensorflow::serving::MultiInferenceResponse& MultiInferenceLog::_internal_response() const {
  return *response_;
}
inline const ::tensorflow::serving::MultiInferenceResponse& MultiInferenceLog::response() const {
  const ::tensorflow::serving::MultiInferenceResponse* p = response_;
  // @@protoc_insertion_point(field_get:tensorflow.serving.MultiInferenceLog.response)
  return p != NULL ? *p : *reinterpret_cast<const ::tensorflow::serving::MultiInferenceResponse*>(
      &::tensorflow::serving::_MultiInferenceResponse_default_instance_);
}
inline ::tensorflow::serving::MultiInferenceResponse* MultiInferenceLog::release_response() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.MultiInferenceLog.response)
  
  ::tensorflow::serving::MultiInferenceResponse* temp = response_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  response_ = NULL;
  return temp;
}
inline ::tensorflow::serving::MultiInferenceResponse* MultiInferenceLog::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.serving.MultiInferenceLog.response)
  
  ::tensorflow::serving::MultiInferenceResponse* temp = response_;
  response_ = NULL;
  return temp;
}
inline ::tensorflow::serving::MultiInferenceResponse* MultiInferenceLog::mutable_response() {
  
  if (response_ == NULL) {
    auto* p = CreateMaybeMessage<::tensorflow::serving::MultiInferenceResponse>(GetArenaNoVirtual());
    response_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.MultiInferenceLog.response)
  return response_;
}
inline void MultiInferenceLog::set_allocated_response(::tensorflow::serving::MultiInferenceResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(response_);
  }
  if (response) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(response)->GetArena();
    if (message_arena != submessage_arena) {
      response = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    
  } else {
    
  }
  response_ = response;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.MultiInferenceLog.response)
}

// -------------------------------------------------------------------

// SessionRunLog

// .tensorflow.serving.SessionRunRequest request = 1;
inline bool SessionRunLog::has_request() const {
  return this != internal_default_instance() && request_ != NULL;
}
inline const ::tensorflow::serving::SessionRunRequest& SessionRunLog::_internal_request() const {
  return *request_;
}
inline const ::tensorflow::serving::SessionRunRequest& SessionRunLog::request() const {
  const ::tensorflow::serving::SessionRunRequest* p = request_;
  // @@protoc_insertion_point(field_get:tensorflow.serving.SessionRunLog.request)
  return p != NULL ? *p : *reinterpret_cast<const ::tensorflow::serving::SessionRunRequest*>(
      &::tensorflow::serving::_SessionRunRequest_default_instance_);
}
inline ::tensorflow::serving::SessionRunRequest* SessionRunLog::release_request() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.SessionRunLog.request)
  
  ::tensorflow::serving::SessionRunRequest* temp = request_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  request_ = NULL;
  return temp;
}
inline ::tensorflow::serving::SessionRunRequest* SessionRunLog::unsafe_arena_release_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.serving.SessionRunLog.request)
  
  ::tensorflow::serving::SessionRunRequest* temp = request_;
  request_ = NULL;
  return temp;
}
inline ::tensorflow::serving::SessionRunRequest* SessionRunLog::mutable_request() {
  
  if (request_ == NULL) {
    auto* p = CreateMaybeMessage<::tensorflow::serving::SessionRunRequest>(GetArenaNoVirtual());
    request_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.SessionRunLog.request)
  return request_;
}
inline void SessionRunLog::set_allocated_request(::tensorflow::serving::SessionRunRequest* request) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(request_);
  }
  if (request) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(request)->GetArena();
    if (message_arena != submessage_arena) {
      request = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, request, submessage_arena);
    }
    
  } else {
    
  }
  request_ = request;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.SessionRunLog.request)
}

// .tensorflow.serving.SessionRunResponse response = 2;
inline bool SessionRunLog::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
inline const ::tensorflow::serving::SessionRunResponse& SessionRunLog::_internal_response() const {
  return *response_;
}
inline const ::tensorflow::serving::SessionRunResponse& SessionRunLog::response() const {
  const ::tensorflow::serving::SessionRunResponse* p = response_;
  // @@protoc_insertion_point(field_get:tensorflow.serving.SessionRunLog.response)
  return p != NULL ? *p : *reinterpret_cast<const ::tensorflow::serving::SessionRunResponse*>(
      &::tensorflow::serving::_SessionRunResponse_default_instance_);
}
inline ::tensorflow::serving::SessionRunResponse* SessionRunLog::release_response() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.SessionRunLog.response)
  
  ::tensorflow::serving::SessionRunResponse* temp = response_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  response_ = NULL;
  return temp;
}
inline ::tensorflow::serving::SessionRunResponse* SessionRunLog::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.serving.SessionRunLog.response)
  
  ::tensorflow::serving::SessionRunResponse* temp = response_;
  response_ = NULL;
  return temp;
}
inline ::tensorflow::serving::SessionRunResponse* SessionRunLog::mutable_response() {
  
  if (response_ == NULL) {
    auto* p = CreateMaybeMessage<::tensorflow::serving::SessionRunResponse>(GetArenaNoVirtual());
    response_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.SessionRunLog.response)
  return response_;
}
inline void SessionRunLog::set_allocated_response(::tensorflow::serving::SessionRunResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(response_);
  }
  if (response) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(response)->GetArena();
    if (message_arena != submessage_arena) {
      response = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    
  } else {
    
  }
  response_ = response;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.SessionRunLog.response)
}

// -------------------------------------------------------------------

// PredictionLog

// .tensorflow.serving.LogMetadata log_metadata = 1;
inline bool PredictionLog::has_log_metadata() const {
  return this != internal_default_instance() && log_metadata_ != NULL;
}
inline const ::tensorflow::serving::LogMetadata& PredictionLog::_internal_log_metadata() const {
  return *log_metadata_;
}
inline const ::tensorflow::serving::LogMetadata& PredictionLog::log_metadata() const {
  const ::tensorflow::serving::LogMetadata* p = log_metadata_;
  // @@protoc_insertion_point(field_get:tensorflow.serving.PredictionLog.log_metadata)
  return p != NULL ? *p : *reinterpret_cast<const ::tensorflow::serving::LogMetadata*>(
      &::tensorflow::serving::_LogMetadata_default_instance_);
}
inline ::tensorflow::serving::LogMetadata* PredictionLog::release_log_metadata() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.PredictionLog.log_metadata)
  
  ::tensorflow::serving::LogMetadata* temp = log_metadata_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
  }
  log_metadata_ = NULL;
  return temp;
}
inline ::tensorflow::serving::LogMetadata* PredictionLog::unsafe_arena_release_log_metadata() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.serving.PredictionLog.log_metadata)
  
  ::tensorflow::serving::LogMetadata* temp = log_metadata_;
  log_metadata_ = NULL;
  return temp;
}
inline ::tensorflow::serving::LogMetadata* PredictionLog::mutable_log_metadata() {
  
  if (log_metadata_ == NULL) {
    auto* p = CreateMaybeMessage<::tensorflow::serving::LogMetadata>(GetArenaNoVirtual());
    log_metadata_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.PredictionLog.log_metadata)
  return log_metadata_;
}
inline void PredictionLog::set_allocated_log_metadata(::tensorflow::serving::LogMetadata* log_metadata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(log_metadata_);
  }
  if (log_metadata) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(log_metadata)->GetArena();
    if (message_arena != submessage_arena) {
      log_metadata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, log_metadata, submessage_arena);
    }
    
  } else {
    
  }
  log_metadata_ = log_metadata;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.serving.PredictionLog.log_metadata)
}

// .tensorflow.serving.ClassifyLog classify_log = 2;
inline bool PredictionLog::has_classify_log() const {
  return log_type_case() == kClassifyLog;
}
inline void PredictionLog::set_has_classify_log() {
  _oneof_case_[0] = kClassifyLog;
}
inline void PredictionLog::clear_classify_log() {
  if (has_classify_log()) {
    if (GetArenaNoVirtual() == NULL) {
      delete log_type_.classify_log_;
    }
    clear_has_log_type();
  }
}
inline const ::tensorflow::serving::ClassifyLog& PredictionLog::_internal_classify_log() const {
  return *log_type_.classify_log_;
}
inline ::tensorflow::serving::ClassifyLog* PredictionLog::release_classify_log() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.PredictionLog.classify_log)
  if (has_classify_log()) {
    clear_has_log_type();
      ::tensorflow::serving::ClassifyLog* temp = log_type_.classify_log_;
    if (GetArenaNoVirtual() != NULL) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    log_type_.classify_log_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::tensorflow::serving::ClassifyLog& PredictionLog::classify_log() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.PredictionLog.classify_log)
  return has_classify_log()
      ? *log_type_.classify_log_
      : *reinterpret_cast< ::tensorflow::serving::ClassifyLog*>(&::tensorflow::serving::_ClassifyLog_default_instance_);
}
inline ::tensorflow::serving::ClassifyLog* PredictionLog::unsafe_arena_release_classify_log() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.serving.PredictionLog.classify_log)
  if (has_classify_log()) {
    clear_has_log_type();
    ::tensorflow::serving::ClassifyLog* temp = log_type_.classify_log_;
    log_type_.classify_log_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void PredictionLog::unsafe_arena_set_allocated_classify_log(::tensorflow::serving::ClassifyLog* classify_log) {
  clear_log_type();
  if (classify_log) {
    set_has_classify_log();
    log_type_.classify_log_ = classify_log;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.serving.PredictionLog.classify_log)
}
inline ::tensorflow::serving::ClassifyLog* PredictionLog::mutable_classify_log() {
  if (!has_classify_log()) {
    clear_log_type();
    set_has_classify_log();
    log_type_.classify_log_ = CreateMaybeMessage< ::tensorflow::serving::ClassifyLog >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.PredictionLog.classify_log)
  return log_type_.classify_log_;
}

// .tensorflow.serving.RegressLog regress_log = 3;
inline bool PredictionLog::has_regress_log() const {
  return log_type_case() == kRegressLog;
}
inline void PredictionLog::set_has_regress_log() {
  _oneof_case_[0] = kRegressLog;
}
inline void PredictionLog::clear_regress_log() {
  if (has_regress_log()) {
    if (GetArenaNoVirtual() == NULL) {
      delete log_type_.regress_log_;
    }
    clear_has_log_type();
  }
}
inline const ::tensorflow::serving::RegressLog& PredictionLog::_internal_regress_log() const {
  return *log_type_.regress_log_;
}
inline ::tensorflow::serving::RegressLog* PredictionLog::release_regress_log() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.PredictionLog.regress_log)
  if (has_regress_log()) {
    clear_has_log_type();
      ::tensorflow::serving::RegressLog* temp = log_type_.regress_log_;
    if (GetArenaNoVirtual() != NULL) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    log_type_.regress_log_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::tensorflow::serving::RegressLog& PredictionLog::regress_log() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.PredictionLog.regress_log)
  return has_regress_log()
      ? *log_type_.regress_log_
      : *reinterpret_cast< ::tensorflow::serving::RegressLog*>(&::tensorflow::serving::_RegressLog_default_instance_);
}
inline ::tensorflow::serving::RegressLog* PredictionLog::unsafe_arena_release_regress_log() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.serving.PredictionLog.regress_log)
  if (has_regress_log()) {
    clear_has_log_type();
    ::tensorflow::serving::RegressLog* temp = log_type_.regress_log_;
    log_type_.regress_log_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void PredictionLog::unsafe_arena_set_allocated_regress_log(::tensorflow::serving::RegressLog* regress_log) {
  clear_log_type();
  if (regress_log) {
    set_has_regress_log();
    log_type_.regress_log_ = regress_log;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.serving.PredictionLog.regress_log)
}
inline ::tensorflow::serving::RegressLog* PredictionLog::mutable_regress_log() {
  if (!has_regress_log()) {
    clear_log_type();
    set_has_regress_log();
    log_type_.regress_log_ = CreateMaybeMessage< ::tensorflow::serving::RegressLog >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.PredictionLog.regress_log)
  return log_type_.regress_log_;
}

// .tensorflow.serving.PredictLog predict_log = 6;
inline bool PredictionLog::has_predict_log() const {
  return log_type_case() == kPredictLog;
}
inline void PredictionLog::set_has_predict_log() {
  _oneof_case_[0] = kPredictLog;
}
inline void PredictionLog::clear_predict_log() {
  if (has_predict_log()) {
    if (GetArenaNoVirtual() == NULL) {
      delete log_type_.predict_log_;
    }
    clear_has_log_type();
  }
}
inline const ::tensorflow::serving::PredictLog& PredictionLog::_internal_predict_log() const {
  return *log_type_.predict_log_;
}
inline ::tensorflow::serving::PredictLog* PredictionLog::release_predict_log() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.PredictionLog.predict_log)
  if (has_predict_log()) {
    clear_has_log_type();
      ::tensorflow::serving::PredictLog* temp = log_type_.predict_log_;
    if (GetArenaNoVirtual() != NULL) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    log_type_.predict_log_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::tensorflow::serving::PredictLog& PredictionLog::predict_log() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.PredictionLog.predict_log)
  return has_predict_log()
      ? *log_type_.predict_log_
      : *reinterpret_cast< ::tensorflow::serving::PredictLog*>(&::tensorflow::serving::_PredictLog_default_instance_);
}
inline ::tensorflow::serving::PredictLog* PredictionLog::unsafe_arena_release_predict_log() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.serving.PredictionLog.predict_log)
  if (has_predict_log()) {
    clear_has_log_type();
    ::tensorflow::serving::PredictLog* temp = log_type_.predict_log_;
    log_type_.predict_log_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void PredictionLog::unsafe_arena_set_allocated_predict_log(::tensorflow::serving::PredictLog* predict_log) {
  clear_log_type();
  if (predict_log) {
    set_has_predict_log();
    log_type_.predict_log_ = predict_log;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.serving.PredictionLog.predict_log)
}
inline ::tensorflow::serving::PredictLog* PredictionLog::mutable_predict_log() {
  if (!has_predict_log()) {
    clear_log_type();
    set_has_predict_log();
    log_type_.predict_log_ = CreateMaybeMessage< ::tensorflow::serving::PredictLog >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.PredictionLog.predict_log)
  return log_type_.predict_log_;
}

// .tensorflow.serving.MultiInferenceLog multi_inference_log = 4;
inline bool PredictionLog::has_multi_inference_log() const {
  return log_type_case() == kMultiInferenceLog;
}
inline void PredictionLog::set_has_multi_inference_log() {
  _oneof_case_[0] = kMultiInferenceLog;
}
inline void PredictionLog::clear_multi_inference_log() {
  if (has_multi_inference_log()) {
    if (GetArenaNoVirtual() == NULL) {
      delete log_type_.multi_inference_log_;
    }
    clear_has_log_type();
  }
}
inline const ::tensorflow::serving::MultiInferenceLog& PredictionLog::_internal_multi_inference_log() const {
  return *log_type_.multi_inference_log_;
}
inline ::tensorflow::serving::MultiInferenceLog* PredictionLog::release_multi_inference_log() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.PredictionLog.multi_inference_log)
  if (has_multi_inference_log()) {
    clear_has_log_type();
      ::tensorflow::serving::MultiInferenceLog* temp = log_type_.multi_inference_log_;
    if (GetArenaNoVirtual() != NULL) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    log_type_.multi_inference_log_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::tensorflow::serving::MultiInferenceLog& PredictionLog::multi_inference_log() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.PredictionLog.multi_inference_log)
  return has_multi_inference_log()
      ? *log_type_.multi_inference_log_
      : *reinterpret_cast< ::tensorflow::serving::MultiInferenceLog*>(&::tensorflow::serving::_MultiInferenceLog_default_instance_);
}
inline ::tensorflow::serving::MultiInferenceLog* PredictionLog::unsafe_arena_release_multi_inference_log() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.serving.PredictionLog.multi_inference_log)
  if (has_multi_inference_log()) {
    clear_has_log_type();
    ::tensorflow::serving::MultiInferenceLog* temp = log_type_.multi_inference_log_;
    log_type_.multi_inference_log_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void PredictionLog::unsafe_arena_set_allocated_multi_inference_log(::tensorflow::serving::MultiInferenceLog* multi_inference_log) {
  clear_log_type();
  if (multi_inference_log) {
    set_has_multi_inference_log();
    log_type_.multi_inference_log_ = multi_inference_log;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.serving.PredictionLog.multi_inference_log)
}
inline ::tensorflow::serving::MultiInferenceLog* PredictionLog::mutable_multi_inference_log() {
  if (!has_multi_inference_log()) {
    clear_log_type();
    set_has_multi_inference_log();
    log_type_.multi_inference_log_ = CreateMaybeMessage< ::tensorflow::serving::MultiInferenceLog >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.PredictionLog.multi_inference_log)
  return log_type_.multi_inference_log_;
}

// .tensorflow.serving.SessionRunLog session_run_log = 5;
inline bool PredictionLog::has_session_run_log() const {
  return log_type_case() == kSessionRunLog;
}
inline void PredictionLog::set_has_session_run_log() {
  _oneof_case_[0] = kSessionRunLog;
}
inline void PredictionLog::clear_session_run_log() {
  if (has_session_run_log()) {
    if (GetArenaNoVirtual() == NULL) {
      delete log_type_.session_run_log_;
    }
    clear_has_log_type();
  }
}
inline const ::tensorflow::serving::SessionRunLog& PredictionLog::_internal_session_run_log() const {
  return *log_type_.session_run_log_;
}
inline ::tensorflow::serving::SessionRunLog* PredictionLog::release_session_run_log() {
  // @@protoc_insertion_point(field_release:tensorflow.serving.PredictionLog.session_run_log)
  if (has_session_run_log()) {
    clear_has_log_type();
      ::tensorflow::serving::SessionRunLog* temp = log_type_.session_run_log_;
    if (GetArenaNoVirtual() != NULL) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    log_type_.session_run_log_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::tensorflow::serving::SessionRunLog& PredictionLog::session_run_log() const {
  // @@protoc_insertion_point(field_get:tensorflow.serving.PredictionLog.session_run_log)
  return has_session_run_log()
      ? *log_type_.session_run_log_
      : *reinterpret_cast< ::tensorflow::serving::SessionRunLog*>(&::tensorflow::serving::_SessionRunLog_default_instance_);
}
inline ::tensorflow::serving::SessionRunLog* PredictionLog::unsafe_arena_release_session_run_log() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.serving.PredictionLog.session_run_log)
  if (has_session_run_log()) {
    clear_has_log_type();
    ::tensorflow::serving::SessionRunLog* temp = log_type_.session_run_log_;
    log_type_.session_run_log_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void PredictionLog::unsafe_arena_set_allocated_session_run_log(::tensorflow::serving::SessionRunLog* session_run_log) {
  clear_log_type();
  if (session_run_log) {
    set_has_session_run_log();
    log_type_.session_run_log_ = session_run_log;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.serving.PredictionLog.session_run_log)
}
inline ::tensorflow::serving::SessionRunLog* PredictionLog::mutable_session_run_log() {
  if (!has_session_run_log()) {
    clear_log_type();
    set_has_session_run_log();
    log_type_.session_run_log_ = CreateMaybeMessage< ::tensorflow::serving::SessionRunLog >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.serving.PredictionLog.session_run_log)
  return log_type_.session_run_log_;
}

inline bool PredictionLog::has_log_type() const {
  return log_type_case() != LOG_TYPE_NOT_SET;
}
inline void PredictionLog::clear_has_log_type() {
  _oneof_case_[0] = LOG_TYPE_NOT_SET;
}
inline PredictionLog::LogTypeCase PredictionLog::log_type_case() const {
  return PredictionLog::LogTypeCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace serving
}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_tensorflow_5fserving_2fapis_2fprediction_5flog_2eproto
